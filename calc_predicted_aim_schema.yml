# Used for calculating match predictions about an alliance in Server
#
# Example:
#
# {
#     "onstage_rate": 1.8325,
#     "park_rate": 1.4386,
#     "climb_after_rate": 3.5054,
#     "trap_rate": 3.4995,
#     "auto_avg_amp": 1.3753,
#     "auto_avg_speaker": 2.7873,
#     "tele_avg_amp": 4.7773,
#     "tele_avg_speaker": 2.2563,
#     "tele_avg_speaker_amped": 4.8865,
#     "avg_endgame_points": 3.5777,
#     "match_number": 2,
#     "team_numbers": [
#         1678,
#         760,
#         1649
#     ],
#     "alliance_color_is_red": true,
#     "has_actual_data": false,
#     "actual_score": 5,
#     "actual_rp1": 1.6114,
#     "actual_rp2": 4.2127,
#     "won_match": true,
#     "final_predicted_score": 5.8395,
#     "final_predicted_rp1": 4.6616,
#     "final_predicted_rp2": 3.0808,
#     "predicted_score": 5.4925,
#     "predicted_rp1": 6.6938,
#     "predicted_rp2": 1.1856,
#     "win_chance": 4.1202
# }
#


# Contains information about this schema file
schema_file:
  # Version of schema file
  # Incremented every merged schema change
  version: 2

tele_fields:
  tele_avg_amp:
    type: float
  tele_avg_speaker:
    type: float
  tele_avg_amplified:
    type: float
  avg_cycle_time:
    type: float

# Fields used to calculate ensemble RP and endgame score
endgame_fields:
  onstage_rate: 
    var: stage_percent_success_all
    type: float
  park_rate:
    var: parked_percent
    type: float
  climb_after_rate: 
    var: climb_after_percent_success
    type: float
  trap_rate: 
    var: trap_percent_success
    type: float

# Fields used to calculate win chance
win_chance:
  auto_avg_amp:
    sd: auto_sd_amp
    value: 2
    type: float
  auto_avg_speaker:
    sd: auto_sd_speaker
    value: 5
    type: float
  tele_avg_amp:
    sd: tele_sd_amp
    value: 1
    type: float
  tele_avg_speaker:
    sd: tele_sd_speaker
    value: 2
    type: float
  tele_avg_amplified:
    sd: tele_sd_amplified
    value: 5
    type: float
  endgame_avg_total_points:
    sd: None
    value: None
    type: float


# Stores fields that will be added to database but do not require calculations
data:
  match_number:
    type: int
  team_numbers: 
    type: List 
  alliance_color_is_red:
    type: bool
  # Whether or not actual TBA data has been pulled to replace the predicted data
  has_actual_data:
    type: bool
  actual_score:
    type: int
  # Charge RP
  actual_rp1:
    type: float
  # Link RP
  actual_rp2:
    type: float
  won_match:
    type: bool
  # Predicted values at time of the actual match
  final_predicted_score:
    type: float
    requires: [obj_team, tba_team]
  final_predicted_rp1:
    type: float
    requires: [obj_team]
  final_predicted_rp2:
    type: float
    requires: [obj_team]

# Information on predicted values that will be performed
predicted_values:
  predicted_score:
    type: float
    requires: [obj_team, tba_team]
  # TODO: find RPs when TBA updates
  predicted_rp1:
    type: float
    requires: [obj_team]
  predicted_rp2:
    type: float
    requires: [obj_team]
  win_chance:
    type: float
    requires: [obj_team]