# Holds the variables needed to calculate match predictions

# TODO: add example predicted_aim dict here


# Contains information about this schema file
schema_file:
  # Version of schema file
  # Incremented every merged schema change
  version: 1 # Was reset after complete overhaul 2024-04-07

## Team averages
# "type" encodes the way we get the variable: "normal" means we directly pull the variable,
# "sum" means we add other variables together to get the variable, "diff" means we subtract two
# other variables to get the variable, and  "rate" means we divide two other variables to get the variable. 
# "collection" refers to the database collection to pull the variables from (only obj_team and tba_team in 2024).
# "from" refers to the variable(s) to pull.
# "is_joined" refers to whether or not the variable is calculated on the joined (full match) expected values.
# NOTE: joined variables are calculated from the RED alliance's perspective.
--expected_values:
  _auto_amp:
    how: normal
    collection: obj_team
    from: auto_avg_amp
    is_joined: False
  _auto_speaker:
    how: normal
    collection: obj_team
    from: auto_avg_speaker
    is_joined: False
  _num_leave:
    how: rate
    collection: tba_team
    from: [leave_successes, matches_played]
    is_joined: False
  _tele_amp:
    how: normal
    collection: obj_team
    from: tele_avg_amp
    is_joined: False
  _tele_speaker_all:
    how: sum
    collection: obj_team
    from: [tele_avg_unamplified_speaker, tele_avg_amplified]
    is_joined: False
  _total_gamepieces:
    how: sum
    collection: obj_team
    from: [auto_avg_amp, auto_avg_speaker, tele_avg_speaker, tele_avg_amplified]
    is_joined: False
  _num_park:
    how: normal
    collection: obj_team
    from: parked_percent # TODO: this will be changed to "parked_rate" in obj_team sometime, we will need to change it here as well.
    is_joined: False
  _num_onstage:
    how: normal
    collection: obj_team
    from: stage_percent_success_all # TODO: this will be changed to "stage_success_rate_all" in obj_team sometime, we will need to change it here as well.
    is_joined: False
  _num_trap:
    how: normal
    collection: obj_team
    from: trap_percent_success # TODO: this will be changed to "trap_success_rate" in obj_team sometime, we will need to change it here as well.
    is_joined: False
  _rel_score_diff:
    how: rate
    collection: None
    from: [_predicted_score_red, _predicted_score_blue]
    is_joined: True
  
## Variables whose actual values we want to get from TBA.
# `won_match` is excluded since it remains constant every year and requires some more logic.
# "normal" means we directly pull, "sum" means we add together, "diff" means we subtract, and "bool"
# means we take the value at index 0 if false and index 1 if true.
--actual_values:
  # Scores
  actual_score: 
    how: normal
    from: totalPoints
  actual_score_no_foul:
    how: diff
    from: [totalPoints, foulPoints]
  actual_score_auto:
    how: normal
    from: autoPoints
  actual_score_tele:
    how: diff
    from: [teleopPoints, endGameTotalStagePoints]
  actual_score_endgame:
    how: normal
    from: endGameTotalStagePoints
  actual_foul_points: 
    how: normal
    from: foulPoints
  # RPs
  actual_rp1: # Melody
    how: bool
    from: melodyBonusAchieved
    values: [0, 1]
  actual_rp2: # Ensemble
    how: bool
    from: ensembleBonusAchieved
    values: [0, 1]
  # Misc
  cooperated: 
    how: normal
    from: coopertitionBonusAchieved

# Stores fields that will be added to database but do not require calculations
data:
  match_number:
    type: int
  team_numbers: 
    type: List 
  alliance_color_is_red:
    type: bool
  event_key:
    type: str
