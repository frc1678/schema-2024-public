# Used for calculating objective team in match data in Server
#
# Example:
#
# {
#     "confidence_rating": 4,
#    "team_number": "6774",
#   "match_number": 9,
#    "auto_speaker": 3,
#    "auto_amp": 8,
#    "tele_intakes_amp": 6,
#    "tele_intakes_poach": 4,
#    "tele_intakes_center": 5,
#    "tele_intakes_far": 6,
#    "tele_speaker": 8,
#    "tele_speaker_amped": 1,
#    "tele_shoot_other": 8,
#    "failed_score": 6,
#    "tele_amp": 1,
#    "auto_intake_spike_1": 8,
#    "auto_intake_spike_2": 2,
#    "auto_intake_spike_3": 3,
#    "auto_intake_center_1": 4,
#    "auto_intake_center_2": 5,
#    "auto_intake_center_3": 3,
#    "auto_intake_center_4": 3,
#    "auto_intake_center_5": 1,
#    "auto_total_intakes": 8,
#    "auto_total_pieces": 5,
#    "tele_total_intakes": 3,
#    "tele_total_pieces": 7,
#    "total_intakes": 6,
#    "total_pieces": 7,
#    "incap": 2,
#    "median_cycle_time": 8,
#    "stage_level": 6,
#    "start_position": "2",
#    "has_preload": false
# }
#


# Contains information about this schema file
schema_file:
  # Version of schema file
  # Incremented every merged schema change
  version: 2

# Data that doesn't fit into other categorical calculations
data:
  confidence_rating:
    type: int
  team_number:
    type: str
  match_number:
    type: int

# Calculations built around counting timeline actions with certain key:value pairs
timeline_counts:
  auto_speaker:
    type: int
    action_type: score_speaker
    in_teleop: false
  auto_amp:
    type: int
    action_type: score_amp
    in_teleop: false
  tele_intakes_amp:
    type: int
    action_type: intake_amp
    in_teleop: true
  tele_intakes_poach:
    type: int
    action_type: intake_poach
    in_teleop: true
  tele_intakes_center:
    type: int
    action_type: intake_center
    in_teleop: true
  tele_intakes_far:
    type: int
    action_type: intake_far
    in_teleop: true
  tele_speaker:
    type: int
    action_type: score_speaker
    in_teleop: true
  tele_amplified:
    type: int
    action_type: score_amplify
    in_teleop: true
  tele_ferry:
    type: int
    action_type: ferry
    in_teleop: true
  tele_failed_amp:
    type: int
    action_type: score_fail_amp
    in_teleop: true
  tele_failed_speaker:
    type: int
    action_type: score_fail_speaker
    in_teleop: true
  tele_failed_amplified:
    type: int
    action_type: score_fail_amplify
    in_teleop: true
  auto_failed_amp:
    type: int
    action_type: score_fail_amp
    in_teleop: false
  auto_failed_speaker:
    type: int
    action_type: score_fail_speaker
    in_teleop: false
  tele_amp:
    type: int
    action_type: score_amp
    in_teleop: true
  auto_intake_spike_1:
    type: int
    action_type: auto_intake_spike_1
    in_teleop: false
  auto_intake_spike_2:
    type: int
    action_type: auto_intake_spike_2
    in_teleop: false
  auto_intake_spike_3:
    type: int
    action_type: auto_intake_spike_3
    in_teleop: false
  auto_intake_center_1:
    type: int
    action_type: auto_intake_center_1
    in_teleop: false
  auto_intake_center_2:
    type: int
    action_type: auto_intake_center_2
    in_teleop: false
  auto_intake_center_3:
    type: int
    action_type: auto_intake_center_3
    in_teleop: false
  auto_intake_center_4:
    type: int
    action_type: auto_intake_center_4
    in_teleop: false
  auto_intake_center_5:
    type: int
    action_type: auto_intake_center_5
    in_teleop: false
  tele_drop: 
    type: int
    action_type: drop
    in_teleop: true



# Calculations made by adding up other counts
aggregates:
  auto_total_intakes: 
    type: int
    counts: [auto_intake_spike_1, auto_intake_spike_2, auto_intake_spike_3, auto_intake_center_1, auto_intake_center_2, auto_intake_center_3, auto_intake_center_4, auto_intake_center_5]
  auto_total_pieces: 
    type: int
    counts: [auto_amp, auto_speaker]
  auto_total_failed_pieces:
    type: int
    counts: [auto_failed_speaker, auto_failed_amp]
  tele_total_intakes: 
    type: int
    counts: [tele_intakes_amp, tele_intakes_poach, tele_intakes_center, tele_intakes_far]
  tele_total_pieces: 
    type: int
    counts: [tele_amp, tele_speaker, tele_speaker_amped]
  tele_total_failed_pieces:
    type: int
    counts: [tele_failed_speaker, tele_failed_amp]
  total_intakes: 
    type: int
    counts: [auto_intake_spike_1, auto_intake_spike_2, auto_intake_spike_3, auto_intake_center_1, auto_intake_center_2, auto_intake_center_3, auto_intake_center_4, auto_intake_center_5, tele_intakes_amp, tele_intakes_poach, tele_intakes_center, tele_intakes_far]
  total_pieces: 
    type: int
    counts: [auto_amp, auto_speaker, tele_amp, tele_speaker, tele_speaker_amped]


#point_calculations:
#  auto_total_points:
#    type: int
#  tele_total_points:
#    type: int
#  endgame_total_points:
#    type: int
#  total_points:
#    type: int
#  (ADD THESE LATER)

# Calculations built around measuring the time between two timeline actions.
# First item in each list is the start item key:value pair requirements, second item is the end item.
timeline_cycle_time:
  incap:
    type: int
    start_action: start_incap
    end_action: end_incap
    minimum_time: 8
  median_cycle_time:
    type: int
    start_action: score
    end_action: score
    minimum_time: 1
  cycle_time_from_amp_to_amp:
    type: int
    start_action: intake_amp
    end_action: score_amp
    minimum_time: 1
  cycle_time_from_amp_to_speaker:
    type: int
    start_action: intake_amp
    end_action: score_speaker
    minimum_time: 1
  cycle_time_from_poach_to_amp:
    type: int
    start_action: intake_poach
    end_action: score_amp
    minimum_time: 1
  cycle_time_from_poach_to_speaker:
    type: int
    start_action: intake_poach
    end_action: score_speaker
    minimum_time: 1
  cycle_time_from_center_to_amp:
    type: int
    start_action: intake_center
    end_action: score_amp
    minimum_time: 1
  cycle_time_from_center_to_speaker:
    type: int
    start_action: intake_center
    end_action: score_speaker
    minimum_time: 1
  cycle_time_from_far_to_amp:
    type: int
    start_action: intake_far
    end_action: score_amp
    minimum_time: 1
  cycle_time_from_far_to_speaker:
    type: int
    start_action: intake_far
    end_action: score_speaker
    minimum_time: 1


# Robot actions which are one out of a dict of possible actions
# Dict items should be ordered, values are shortened string from qr
categorical_actions:
  stage_level_amp:
    list: ["N", "F", "O"]
    type: str
  stage_level_blind:
    list: ["N", "F", "O"]
    type: str
  stage_level_source:
    list: ["N", "F", "O"]
    type: str
  start_position:
    list: ["0", "1", "2", "3", "4"]
    type: str
  trap:
    list: ["N", "F", "S"]
    type: str
  has_preload:
    list: [True, False]
    type: bool
  parked:
    list: [True, False]
    type: bool

fail_actions:
  score_speaker: "score_fail_speaker"
  score_amp: "score_fail_amp"
  score_amplify: "score_fail_amplify"
