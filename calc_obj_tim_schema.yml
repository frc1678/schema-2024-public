# Used for calculating objective team in match data in Server
#
# Example:
#
#  {
#     "confidence_rating": 7,
#     "team_number": "254",
#     "match_number": 3,
#     "alliance_color_is_red": true,
#     "harmonized": true,
#     "auto_speaker": 9,
#     "auto_amp": 1,
#     "tele_intakes_amp": 8,
#     "tele_intakes_poach": 8,
#     "tele_intakes_center": 1,
#     "tele_intakes_far": 9,
#     "tele_speaker": 4,
#     "tele_amplified": 5,
#     "tele_ferry": 6,
#     "tele_failed_amp": 6,
#     "tele_failed_speaker": 7,
#     "tele_failed_amplified": 4,
#     "auto_failed_amp": 1,
#     "auto_failed_speaker": 1,
#     "tele_amp": 7,
#     "auto_intake_spike_1": 2,
#     "auto_intake_spike_2": 8,
#     "auto_intake_spike_3": 6,
#     "auto_intake_center_1": 7,
#     "auto_intake_center_2": 7,
#     "auto_intake_center_3": 7,
#     "auto_intake_center_4": 7,
#     "auto_intake_center_5": 8,
#     "tele_drop": 6,
#     "auto_total_intakes": 4,
#     "auto_intakes_spike": 5,
#     "auto_intakes_center": 7,
#     "auto_total_pieces": 9,
#     "auto_total_failed_pieces": 3,
#     "tele_total_intakes": 4,
#     "tele_total_pieces": 6,
#     "tele_total_failed_pieces": 9,
#     "total_intakes": 3,
#     "total_pieces": 7,
#     "auto_total_points": 7,
#     "tele_total_points": 5,
#     "endgame_total_points": 4,
#     "total_points": 5,
#     "incap_time": 8,
#     "median_cycle_time": 2,
#     "time_from_amp_to_amp": 6,
#     "time_from_amp_to_speaker": 8,
#     "time_from_poach_to_amp": 8,
#     "time_from_poach_to_speaker": 3,
#     "time_from_center_to_amp": 1,
#     "time_from_center_to_speaker": 9,
#     "time_from_far_to_amp": 1,
#     "time_from_far_to_speaker": 3,
#     "speaker_cycle_time": 3.4291,
#     "amp_cycle_time": 4.0549,
#     "stage_level_left": "N",
#     "stage_level_center": "N",
#     "stage_level_right": "O",
#     "start_position": "2",
#     "trap": "S",
#     "has_preload": true,
#     "parked": true,
#     "score_speaker": "True",
#     "score_amp": "True",
#     "score_amplify": "False"
# }
#


# Contains information about this schema file
schema_file:
  # Version of schema file
  # Incremented every merged schema change
  version: 2

# Data that doesn't fit into other categorical calculations
data:
  confidence_rating:
    type: int
  team_number:
    type: str
  match_number:
    type: int
  alliance_color_is_red:
    type: bool
  harmonized:
    type: bool

# Calculations built around counting timeline actions with certain key:value pairs
timeline_counts:
  auto_speaker:
    type: int
    action_type: score_speaker
    in_teleop: false
  auto_amp:
    type: int
    action_type: score_amp
    in_teleop: false
  tele_intakes_amp:
    type: int
    action_type: intake_amp
    in_teleop: true
  tele_intakes_poach:
    type: int
    action_type: intake_poach
    in_teleop: true
  tele_intakes_center:
    type: int
    action_type: intake_center
    in_teleop: true
  tele_intakes_far:
    type: int
    action_type: intake_far
    in_teleop: true
  tele_speaker:
    type: int
    action_type: score_speaker
    in_teleop: true
  tele_amplified:
    type: int
    action_type: score_amplify
    in_teleop: true
  tele_ferry:
    type: int
    action_type: ferry
    in_teleop: true
  tele_failed_amp:
    type: int
    action_type: score_fail_amp
    in_teleop: true
  tele_failed_speaker:
    type: int
    action_type: score_fail_speaker
    in_teleop: true
  tele_failed_amplified:
    type: int
    action_type: score_fail_amplify
    in_teleop: true
  auto_failed_amp:
    type: int
    action_type: score_fail_amp
    in_teleop: false
  auto_failed_speaker:
    type: int
    action_type: score_fail_speaker
    in_teleop: false
  tele_amp:
    type: int
    action_type: score_amp
    in_teleop: true
  auto_intake_spike_1:
    type: int
    action_type: auto_intake_spike_1
    in_teleop: false
  auto_intake_spike_2:
    type: int
    action_type: auto_intake_spike_2
    in_teleop: false
  auto_intake_spike_3:
    type: int
    action_type: auto_intake_spike_3
    in_teleop: false
  auto_intake_center_1:
    type: int
    action_type: auto_intake_center_1
    in_teleop: false
  auto_intake_center_2:
    type: int
    action_type: auto_intake_center_2
    in_teleop: false
  auto_intake_center_3:
    type: int
    action_type: auto_intake_center_3
    in_teleop: false
  auto_intake_center_4:
    type: int
    action_type: auto_intake_center_4
    in_teleop: false
  auto_intake_center_5:
    type: int
    action_type: auto_intake_center_5
    in_teleop: false
  tele_drop: 
    type: int
    action_type: drop
    in_teleop: true



# Calculations made by adding up other counts
aggregates:
  auto_total_intakes: 
    type: int
    counts: [auto_intake_spike_1, auto_intake_spike_2, auto_intake_spike_3, auto_intake_center_1, auto_intake_center_2, auto_intake_center_3, auto_intake_center_4, auto_intake_center_5]
  auto_intakes_spike:
    type: int
    counts: [auto_intake_spike_1, auto_intake_spike_2, auto_intake_spike_3]
  auto_intakes_center:
    type: int
    counts: [auto_intake_center_1, auto_intake_center_2, auto_intake_center_3, auto_intake_center_4, auto_intake_center_5]
  auto_total_pieces: 
    type: int
    counts: [auto_amp, auto_speaker]
  auto_total_failed_pieces:
    type: int
    counts: [auto_failed_speaker, auto_failed_amp]
  tele_total_intakes: 
    type: int
    counts: [tele_intakes_amp, tele_intakes_poach, tele_intakes_center, tele_intakes_far]
  tele_total_pieces: 
    type: int
    counts: [tele_amp, tele_speaker, tele_amplified]
  tele_total_failed_pieces:
    type: int
    counts: [tele_failed_speaker, tele_failed_amp]
  total_intakes: 
    type: int
    counts: [auto_intake_spike_1, auto_intake_spike_2, auto_intake_spike_3, auto_intake_center_1, auto_intake_center_2, auto_intake_center_3, auto_intake_center_4, auto_intake_center_5, tele_intakes_amp, tele_intakes_poach, tele_intakes_center, tele_intakes_far]
  total_pieces: 
    type: int
    counts: [auto_amp, auto_speaker, tele_amp, tele_speaker, tele_amplified]

#Stores scoring actions and their point values
#total_points does not include endgame for now
point_calculations:
  auto_total_points:
   type: int
   counts: {auto_amp: 2, auto_speaker: 5}
  tele_total_points:
    type: int
    counts: {tele_amp: 1, tele_speaker: 2, tele_amplified: 5}
  endgame_total_points:
    type: int
    counts: {}
  total_points:
    type: int
    counts: {auto_amp: 2, auto_speaker: 5, tele_amp: 1, tele_speaker: 2, tele_amplified: 5}

# Calculations built around measuring the time between two timeline actions.
# First item in each list is the start item key:value pair requirements, second item is the end item.
timeline_cycle_time:
  incap_time:
    type: int
    start_action: start_incap_time
    end_action: end_incap_time
    minimum_time: 8
  median_cycle_time:
    type: int
    start_action: score
    end_action: score
    minimum_time: 1
  time_from_amp_to_amp:
    type: int
    start_action: intake_amp
    end_action: [score_amp, score_fail_amp]
    minimum_time: 1
  time_from_amp_to_speaker:
    type: int
    start_action: intake_amp
    end_action: [score_speaker, score_amplify, score_fail_speaker, score_fail_amplify]
    minimum_time: 1
  time_from_poach_to_amp:
    type: int
    start_action: intake_poach
    end_action: score_amp
    minimum_time: 1
  time_from_poach_to_speaker:
    type: int
    start_action: intake_poach
    end_action: [score_speaker, score_amplify, score_fail_speaker, score_fail_amplify]
    minimum_time: 1
  time_from_center_to_amp:
    type: int
    start_action: intake_center
    end_action: score_amp
    minimum_time: 1
  time_from_center_to_speaker:
    type: int
    start_action: intake_center
    end_action: [score_speaker, score_amplify, score_fail_speaker, score_fail_amplify]
    minimum_time: 1
  time_from_far_to_amp:
    type: int
    start_action: intake_far
    end_action: score_amp
    minimum_time: 1
  time_from_far_to_speaker:
    type: int
    start_action: intake_far
    end_action: [score_speaker, score_amplify, score_fail_speaker, score_fail_amplify]
    minimum_time: 1

# Calculations built to measure either the expected cycle time or the expected number of cycles in a match
# The calc field differentiates cycles from cycle times ("time" for cycle time, "num" for cycles)
# The ignore_shot_out_of_auto field makes sure that the cycle calcs ignore a teleop shot straight out of auto (no intake)
calculate_expected_fields:
  calcs:
    expected_cycle_time:
      type: float
      calc: time
      ignore_shot_out_of_auto: True
      include_ferry_and_drop: True
      score_actions: [score_speaker, score_amplify, score_fail_speaker, score_fail_amplify, score_amp, score_fail_amp]
    expected_speaker_cycle_time:
      type: float
      calc: time
      ignore_shot_out_of_auto: True
      include_ferry_and_drop: True
      score_actions: [score_speaker, score_amplify, score_fail_speaker, score_fail_amplify]
    expected_amp_cycle_time:
      type: float
      calc: time
      ignore_shot_out_of_auto: True
      include_ferry_and_drop: True
      score_actions: [score_amp, score_fail_amp]
    expected_cycles:
      type: float
      calc: num
      ignore_shot_out_of_auto: True
      include_ferry_and_drop: True
      score_actions: [score_speaker, score_amplify, score_fail_speaker, score_fail_amplify, score_amp, score_fail_amp]
    expected_speaker_cycles:
      type: float
      calc: num
      ignore_shot_out_of_auto: True
      include_ferry_and_drop: True
      score_actions: [score_speaker, score_amplify, score_fail_speaker, score_fail_amplify]
    expected_amp_cycles:
      type: float
      calc: num
      ignore_shot_out_of_auto: True
      include_ferry_and_drop: True
      score_actions: [score_amp, score_fail_amp]
    # Does not include fails
    # Does not include ferry or dropped pieces
    expected_notes:
      type: float
      calc: num
      ignore_shot_out_of_auto: False
      include_ferry_and_drop: False
      score_actions: [score_speaker, score_amplify, score_amp]
    expected_speaker_notes:
      type: float
      calc: num
      ignore_shot_out_of_auto: False
      include_ferry_and_drop: False
      score_actions: [score_speaker, score_amplify]
    expected_amp_notes:
      type: float
      calc: num
      ignore_shot_out_of_auto: False
      include_ferry_and_drop: False
      score_actions: [score_amp]
  intake_weights:
    intake_far:
      normal: 1
      ferry_drop: 0.75
    intake_center:
      normal: 0.5
      ferry_drop: 0.375
    intake_poach:
      normal: 0.33
      ferry_drop: 0.2475
    intake_amp:
      normal: 0.25
      ferry_drop: 0.1875


# Robot actions which are one out of a dict of possible actions
# Dict items should be ordered, values are shortened string from qr
categorical_actions:
  stage_level_left:
    list: ["N", "F", "O"]
    type: str
  stage_level_center:
    list: ["N", "F", "O"]
    type: str
  stage_level_right:
    list: ["N", "F", "O"] 
    type: str
  start_position:
    list: ["0", "1", "2", "3", "4"]
    type: str
  trap:
    list: ["N", "F", "S"]
    type: str
  has_preload:
    list: [True, False]
    type: bool
  parked:
    list: [True, False]
    type: bool

fail_actions:
  score_speaker:
    name: score_fail_speaker
    type: str
  score_amp:
    name: score_fail_amp
    type: str
  score_amplify:
    name: score_fail_amplify
    type: str
