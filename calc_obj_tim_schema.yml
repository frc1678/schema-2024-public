# Used for calculating objective team in match data in Server
#
# Example:
#
# {
#     "confidence_rating": 1,
#     "team_number": "34",
#     "match_number": 2,
#     "auto_cube_low": 4,
#     "auto_cube_mid": 2,
#     "auto_cube_high": 8,
#     "auto_cone_low": 5,
#     "auto_cone_mid": 2,
#     "auto_cone_high": 2,
#     "auto_charge_attempt": 2,
#     "tele_cube_low": 3,
#     "tele_cube_mid": 7,
#     "tele_cube_high": 7,
#     "tele_cone_low": 7,
#     "tele_cone_mid": 9,
#     "tele_cone_high": 9,
#     "tele_charge_attempt": 6,
#     "intakes_ground": 5,
#     "intakes_station": 5,
#     "intakes_low_row": 6,
#     "auto_total_cubes": 1,
#     "auto_total_cones": 8,
#     "auto_total_gamepieces": 3,
#     "tele_total_cubes": 6,
#     "tele_total_cones": 6,
#     "tele_total_gamepieces": 6,
#     "total_intakes": 4,
#     "total_charge_attempts": 9,
#     "tele_total_gamepiece_low": 1,
#     "incap": 4,
#     "auto_charge_level": "D",
#     "tele_charge_level": "N",
#     "start_position": 2,
#     "preloaded_gamepiece": "B"
# }
#


# Contains information about this schema file
schema_file:
  # Version of schema file
  # Incremented every merged schema change
  version: 1

# Data that doesn't fit into other categorical calculations
data:
  confidence_rating:
    type: int
  team_number:
    type: str
  match_number:
    type: int

# Calculations built around counting timeline actions with certain key:value pairs
timeline_counts:
  auto_speaker:
    type: int
    action_type: score_speaker
    in_teleop: false
  auto_amp:
    type: int
    action_type: score_amp
    in_teleop: false
  tele_intakes_amp:
    type: int
    action_type: intake_amp
    in_teleop: true
  tele_intakes_poach:
    type: int
    action_type: intake_poach
    in_teleop: true
  tele_intakes_center:
    type: int
    action_type: intake_center
    in_teleop: true
  tele_intakes_far:
    type: int
    action_type: intake_far
    in_teleop: true
  tele_speaker:
    type: int
    action_type: score_speaker
    in_teleop: true
  tele_speaker_amped:
    type: int
    action_type: score_speaker_amped
    in_teleop: true
  tele_shoot_other:
    type: int
    action_type: shoot_other
    in_teleop: true
  failed_score_speaker:
    type: int
    action_type: score_fail_speaker
  failed_score_amp:
    type: int
    action_type: score_fail_amp
  failed_score_trap:
    type: int
    action_type: score_fail_trap
  trap:
    type: int
    action_type: score_trap
    in_teleop: true
  tele_amp:
    type: int
    action_type: score_amp
    in_teleop: true
  auto_intake_spike_1:
    type: int
    action_type: auto_intake_spike_1
    in_teleop: false
  auto_intake_spike_2:
    type: int
    action_type: auto_intake_spike_2
    in_teleop: false
  auto_intake_spike_3:
    type: int
    action_type: auto_intake_spike_3
    in_teleop: false
  auto_intake_center_1:
    type: int
    action_type: auto_intake_center_1
    in_teleop: false
  auto_intake_center_2:
    type: int
    action_type: auto_intake_center_2
    in_teleop: false
  auto_intake_center_3:
    type: int
    action_type: auto_intake_center_3
    in_teleop: false
  auto_intake_center_4:
    type: int
    action_type: auto_intake_center_4
    in_teleop: false
  auto_intake_center_5:
    type: int
    action_type: auto_intake_center_5
    in_teleop: false

  




# Calculations made by adding up other counts
aggregates:
  auto_total_intakes: 
    type: int
    counts: [auto_intake_spike_1, auto_intake_spike_2, auto_intake_spike_3, auto_intake_center_1, auto_intake_center_2, auto_intake_center_3, auto_intake_center_4, auto_intake_center_5]
  auto_total_pieces: 
    type: int
    counts: [auto_amp, auto_speaker]
  tele_total_intakes: 
    type: int
    counts: [tele_intakes_amp, tele_intakes_poach, tele_intakes_center, tele_intakes_far]
  tele_total_pieces: 
    type: int
    counts: [tele_amp, tele_speaker, tele_speaker_amped]
  total_intakes: 
    type: int
    counts: [auto_intake_spike_1, auto_intake_spike_2, auto_intake_spike_3, auto_intake_center_1, auto_intake_center_2, auto_intake_center_3, auto_intake_center_4, auto_intake_center_5, tele_intakes_amp, tele_intakes_poach, tele_intakes_center, tele_intakes_far]
  total_pieces: 
    type: int
    counts: [auto_amp, auto_speaker, tele_amp, tele_speaker, tele_speaker_amped]
  


# Calculations built around measuring the time between two timeline actions.
# First item in each list is the start item key:value pair requirements, second item is the end item.
timeline_cycle_time:
  incap:
    type: int
    start_action: start_incap
    end_action: end_incap
    minimum_time: 8
  median_cycle_time:
    type: int
    start_action: score
    end_action: score
    minimum_time: 1
  cycle_time_from_amp_to_amp:
    type: int
    start_action: intake_amp
    end_action: score_amp
    minimum_time: 1
  cycle_time_from_amp_to_speaker:
    type: int
    start_action: intake_amp
    end_action: score_speaker
    minimum_time: 1
  cycle_time_from_poach_to_amp:
    type: int
    start_action: intake_poach
    end_action: score_amp
    minimum_time: 1
  cycle_time_from_poach_to_speaker:
    type: int
    start_action: intake_poach
    end_action: score_speaker
    minimum_time: 1
  cycle_time_from_center_to_amp:
    type: int
    start_action: intake_center
    end_action: score_amp
    minimum_time: 1
  cycle_time_from_center_to_speaker:
    type: int
    start_action: intake_center
    end_action: score_speaker
    minimum_time: 1
  cycle_time_from_far_to_amp:
    type: int
    start_action: intake_far
    end_action: score_amp
    minimum_time: 1
  cycle_time_from_far_to_speaker:
    type: int
    start_action: intake_far
    end_action: score_speaker
    minimum_time: 1


# Robot actions which are one out of a dict of possible actions
# Dict items should be ordered, values are shortened string from qr
categorical_actions:
  stage_level:
    list: ["N", F, P, O]
    type: int
  start_position:
    list: ["0", "1", "2", "3"]
    type: str
  has_preload:
    list: [True, False]
    type: bool
